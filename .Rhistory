x = "Outcome Type",
y = "Intake Condition") +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
count(vet_df, intake_condition, sort=TRUE)
vet_df %>%
filter(intake_type == 'wildlife') %>%
count(animal_type, sort = TRUE)
#| message: false
library(tidyverse)
library(ggmosaic)
library(gtsummary)
library(lsr)
library(chisq.posthoc.test)
library(ggplot2)
#| message: false
#| warning: false
vet_df <- readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv') %>%
mutate(intake_condition = str_replace(intake_condition, '  ', ' '))
vet_df %>% head()
# Create a contingency table
contingency_table2 <- table(vet_df$animal_type, vet_df$outcome_type_clean)
sum(is.na(vet_df$animal_type))
# add age
vet_df <- vet_df %>%
mutate(intake_condition = case_when(str_detect(intake_condition, 'behavior moderate') ~ 'ill moderate',
str_detect(intake_condition, 'behavior mild') ~ 'ill mild',
str_detect(intake_condition, 'behavior severe') ~ 'ill severe',
str_detect(intake_condition, 'intakeexam') ~ 'normal',
TRUE ~ intake_condition
),
intake_condition = str_replace(intake_condition, 'moderatete', 'moderate'),
outcome_type_clean = case_when(str_detect(outcome_type,'neuter') ~ 'neuter',
str_detect(outcome_type,'return') ~ 'return',
str_detect(outcome_type, 'foster') ~ 'adoption',
# lumping with adoption
str_detect(outcome_type, 'homefirst') ~ 'adoption',
# not sure what this means, but lumping with adoption. could be wrong
str_detect(outcome_type, 'disposal') ~ 'died',
TRUE ~ outcome_type),
age = difftime(intake_date, dob, units = 'days')/365,
stay_length = difftime(intake_date, outcome_date, units = 'days')) %>%
filter(!outcome_type %in% c('duplicate', 'missing'),
!is.na(outcome_type))
# Create a contingency table
contingency_table2 <- table(vet_df$animal_type, vet_df$outcome_type_clean)
# Perform Chi-Square Test
chi_square_result2 <- chisq.test(contingency_table2)
print(chi_square_result2)
contingency_df2 <- as.data.frame(contingency_table2)
ggplot(contingency_df2, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile() +
labs(title = "Heatmap of Intake Condition vs. Outcome Type",
x = "Outcome Type",
y = "Intake Condition") +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check expected frequencies
expected2 <- chisq.test(contingency_table2)$expected
# Check if any expected frequencies are less than 5
any(expected2 < 5)
vet_df_dc <- vet_df %>%
filter(animal_type %in% c('dog', 'cat'))
# Create a contingency table
contingency_table3 <- table(vet_df_dc$animal_type, vet_df_dc$outcome_type_clean)
# Perform Chi-Square Test
chi_square_result3 <- chisq.test(contingency_table3)
print(chi_square_result3)
# Check expected frequencies
expected2 <- chisq.test(contingency_table2)$expected
# Check if any expected frequencies are less than 5
any(expected2 < 5)
contingency_df2 <- as.data.frame(contingency_table2)
ggplot(contingency_df2, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile() +
labs(title = "Heatmap of Intake Condition vs. Outcome Type",
x = "Outcome Type",
y = "Intake Condition") +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check expected frequencies
expected2 <- chisq.test(contingency_table2)$expected
expected2
# Check if any expected frequencies are less than 5
#any(expected2 < 5)
# Calculate row proportions to analyze specific associations. Look for high proportions in specific cells.
row_proportions <- prop.table(contingency_table, margin = 1)
print(row_proportions)
vet_df_dc <- vet_df %>%
filter(animal_type %in% c('dog', 'cat', 'bird'))
# Create a contingency table
contingency_table3 <- table(vet_df_dc$animal_type, vet_df_dc$outcome_type_clean)
# Perform Chi-Square Test
chi_square_result3 <- chisq.test(contingency_table3)
print(chi_square_result3)
contingency_df3 <- as.data.frame(contingency_table3)
ggplot(contingency_df3, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile() +
labs(title = "Heatmap of Intake Condition vs. Outcome Type",
x = "Outcome Type",
y = "Intake Condition") +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# add age
vet_df <- vet_df %>%
filter(!outcome_type %in% c('duplicate', 'missing'),
!is.na(outcome_type)) %>%
mutate(intake_condition = case_when(str_detect(intake_condition, 'behavior moderate') ~ 'ill moderate',
str_detect(intake_condition, 'behavior mild') ~ 'ill mild',
str_detect(intake_condition, 'behavior severe') ~ 'ill severe',
str_detect(intake_condition, 'intakeexam') ~ 'normal',
TRUE ~ intake_condition
),
intake_condition = str_replace(intake_condition, 'moderatete', 'moderate'),
outcome_type_clean = case_when(str_detect(outcome_type,'neuter') ~ 'neuter',
str_detect(outcome_type,'return') ~ 'return',
str_detect(outcome_type, 'foster') ~ 'adoption',
# lumping with adoption
str_detect(outcome_type, 'homefirst') ~ 'adoption',
# not sure what this means, but lumping with adoption. could be wrong
str_detect(outcome_type, 'disposal') ~ 'died',
str_detect(outcome_type, 'community cat') ~ 'return',
TRUE ~ outcome_type),
age = difftime(intake_date, dob, units = 'days')/365,
stay_length = difftime(intake_date, outcome_date, units = 'days'))
vet_df_dc <- vet_df %>%
filter(animal_type %in% c('dog', 'cat', 'bird'))
# Create a contingency table
contingency_table3 <- table(vet_df_dc$animal_type, vet_df_dc$outcome_type_clean)
# Perform Chi-Square Test
chi_square_result3 <- chisq.test(contingency_table3)
print(chi_square_result3)
contingency_df3 <- as.data.frame(contingency_table3)
ggplot(contingency_df3, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile() +
labs(title = "Heatmap of Intake Condition vs. Outcome Type",
x = "Outcome Type",
y = "Intake Condition") +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a contingency table
contingency_table2 <- table(vet_df$animal_type, vet_df$outcome_type_clean)
# Perform Chi-Square Test
chi_square_result2 <- chisq.test(contingency_table2)
print(chi_square_result2)
contingency_df2 <- as.data.frame(contingency_table2)
ggplot(contingency_df2, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile() +
labs(title = "Heatmap of Intake Condition vs. Outcome Type",
x = "Outcome Type",
y = "Intake Condition") +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(posthoc_results)
# Perform post-hoc tests (optional)
posthoc_results <- chisq.posthoc.test(contingency_table, method = "bonferroni")
print(posthoc_results)
posthoc_results %>% filter(str_detect(Dimension, 'ill'))
# Create a faceted bar plot
ggplot(vet_df, aes(x = intake_condition, fill = outcome_type)) +
geom_bar(position = "dodge") +
facet_wrap(~ animal_type, scales = "free") +
labs(title = "Intake Condition vs. Outcome Type by Animal Type",
x = "Intake Condition",
y = "Count",
fill = "Outcome Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a faceted bar plot
ggplot(vet_df, aes(x = intake_condition) + geom_bar()
# Create a faceted bar plot
ggplot(vet_df, aes(x = intake_condition)) + geom_bar()
# Create a faceted bar plot
ggplot(vet_df, aes(x = intake_condition)) + geom_bar()
# Create a combined data frame with counts for each variable
count_data <- vet_df %>%
pivot_longer(cols = c(animal_type, intake_condition, outcome_type),
names_to = "variable",
values_to = "category") %>%
group_by(variable, category) %>%
summarise(count = n(), .groups = "drop")
# View the data
print(count_data)
# Create faceted bar charts
ggplot(count_data, aes(x = category, y = count, fill = category)) +
geom_bar(stat = "identity") +
facet_wrap(~ variable, scales = "free") +  # Facet by variable
labs(title = "Counts of Animal Type, Intake Condition, and Outcome Type",
x = "Category",
y = "Count",
fill = "Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Customize colors
ggplot(count_data, aes(x = category, y = count, fill = category)) +
geom_bar(stat = "identity") +
facet_wrap(~ variable, scales = "free") +
scale_fill_manual(values = c("dog" = "brown", "cat" = "gray", "bird" = "green",
"normal" = "blue", "ill mild" = "orange", "injured severe" = "red",
"adoption" = "green", "euthanasia" = "red", "rescue" = "blue")) +
labs(title = "Counts of Animal Type, Intake Condition, and Outcome Type",
x = "Category",
y = "Count",
fill = "Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
vet_df %>%
count(animal_type, sort = TRUE) %>%
ggplot(aes(x = reorder(animal_type, -count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +  # Use counts directly
labs(title = "Counts of Animal Types",
x = "Animal Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
vet_df %>%
count(animal_type, sort = TRUE) %>%
ggplot(aes(x = animal_type, y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +  # Use counts directly
labs(title = "Counts of Animal Types",
x = "Animal Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
vet_df %>%
count(animal_type, sort = TRUE) %>%
ggplot(aes(x = animal_type))
vet_df %>% ggplot(aes(x = animal_type)) + geom_bar()
# Create the bar chart
vet_df %>%
ggplot(aes(x = reorder(animal_type, -table(animal_type)[animal_type]))) +  # Sort in descending order
geom_bar(fill = "steelblue") +  # Add bars
labs(title = "Counts of Animal Types",
x = "Animal Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Create the bar chart
vet_df %>%
ggplot(aes(x = reorder(animal_type, -table(animal_type)[animal_type]))) +  # Sort in descending order
geom_bar(fill = "darkseagreen") +  # Add bars
labs(title = "Counts of Animal Types",
x = "Animal Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Bar chart for intake_condition
vet_df %>%
ggplot(aes(x = reorder(intake_condition, -table(intake_condition)[intake_condition]))) +  # Sort in descending order
geom_bar(fill = "darkseagreen") +
labs(title = "Counts of Intake Conditions",
x = "Intake Condition",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Bar chart for outcome_type
vet_df %>%
ggplot(aes(x = reorder(outcome_type, -table(outcome_type)[outcome_type]))) +  # Sort in descending order
geom_bar(fill = "darkseagreen") +
labs(title = "Counts of Outcome Types",
x = "Outcome Type",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Bar chart for intake_condition
vet_df %>%
ggplot(aes(x = reorder(intake_condition, -table(intake_condition)[intake_condition]))) +  # Sort in descending order
geom_bar(fill = "darkseagreen") +
labs(title = "Counts of Intake Conditions",
x = "Intake Condition",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rm(list = ls())
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
group_by(outcome_date) %>%
summarise(adoption_count = n(), .groups = "drop")
#| message: false
#| warning: false
vet_df <- readr::read_csv(
'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv') %>%
mutate(intake_condition = str_replace(intake_condition, '  ', ' '))
print(head(vet_df))
# add age
vet_df <- vet_df %>%
filter(!outcome_type %in% c('duplicate', 'missing'),
!is.na(outcome_type)) %>%
mutate(intake_condition = case_when(str_detect(intake_condition, 'behavior moderate') ~ 'ill moderate',
str_detect(intake_condition, 'behavior mild') ~ 'ill mild',
str_detect(intake_condition, 'behavior severe') ~ 'ill severe',
str_detect(intake_condition, 'intakeexam') ~ 'normal',
TRUE ~ intake_condition
),
intake_condition = str_replace(intake_condition, 'moderatete', 'moderate'),
outcome_type_clean = case_when(str_detect(outcome_type,'neuter') ~ 'neuter',
str_detect(outcome_type,'return') ~ 'return',
str_detect(outcome_type, 'foster') ~ 'adoption',
# lumping with adoption
str_detect(outcome_type, 'homefirst') ~ 'adoption',
# not sure what this means, but lumping with adoption. could be wrong
str_detect(outcome_type, 'disposal') ~ 'died',
str_detect(outcome_type, 'community cat') ~ 'return',
# not sure here, but CATegory violates chisq assumption of no impossible combinations
TRUE ~ outcome_type),
age = difftime(intake_date, dob, units = 'days')/365,
stay_length = difftime(outcome_date, intake_date, units = 'days'))
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
group_by(outcome_date) %>%
summarise(adoption_count = n(), .groups = "drop")
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "steelblue", size = 1) +  # Add a line
geom_point(color = "steelblue", size = 2) +  # Add points
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +  # Use a clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
group_by(outcome_date) %>%
summarise(adoption_count = n(), .groups = "drop")
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
group_by(outcome_date) %>%
summarise(adoption_count = n(), .groups = "drop")
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "steelblue", size = 1) +
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(adoptions_by_date)
vet_df %>%
filter(outcome_type == "adoption") %>% count(outcome_date)
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
group_by(outcome_date) %>%
summarise(adoption_count = n(), .groups = "drop")
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "steelblue", size = 1) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
group_by(outcome_date) %>%
summarise(adoption_count = n(), .groups = "drop")
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "steelblue", size = 1) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "steelblue", size = 0.1) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "green", size = 0.5) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "darkgreen", size = 0.5) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
vet_df %>%
filter(outcome_type == "adoption") %>%
mutate(adoption_yyyymm = ym(outdome_date))
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
mutate(adoption_yyyymm = ym(outcome_date)) %>%
group_by(adoption_yyyymm) %>%
summarise(adoption_count = n(), .groups = "drop")
View(adoptions_by_date)
vet_df$outcome_date
vet_df$outcome_date[1]
lubridate::ym(vet_df$outcome_date[1])
month(vet_df$outcome_date[1])
# Aggregate adoptions by outcome_date
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
mutate(adoption_month = format(as.Date(outcome_date), "%Y-%m") %>%
group_by(adoption_month) %>%
summarise(adoption_count = n(), .groups = "drop")
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
adoptions_by_date <- vet_df %>%
filter(outcome_type == "adoption") %>%
mutate(adoption_month = format(as.Date(outcome_date), "%Y-%m")) %>%
group_by(adoption_month) %>%
summarise(adoption_count = n(), .groups = "drop")
View(adoptions_by_date)
ggplot(adoptions_by_date, aes(x = outcome_date, y = adoption_count)) +
geom_line(color = "darkgreen", size = 0.5) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(adoptions_by_date, aes(x = adoption_month, y = adoption_count)) +
geom_line(color = "darkgreen", size = 0.5) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month") +
#geom_smooth(method = "loess", color = "red", se = FALSE) +  # Add a smoother trend line
labs(title = "Time Series of Adoptions",
x = "Date",
y = "Number of Adoptions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rmarkdown::render("projects/tidy-tuesday-20250304.Rmd")
pwd()
get_wd()
getwd()
setwd("~/Documents/hankowens.github.io")
rmarkdown::render("projects/tidy-tuesday-20250304.Rmd")
rmarkdown::render("projects/tidy-tuesday-20250304.Rmd")
View(expected2)
pwd
pwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Using R
# Option 1: tidytuesdayR R package
install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2025-03-11')
## OR
tuesdata <- tidytuesdayR::tt_load(2025, week = 10)
pixar_films <- tuesdata$pixar_films
public_response <- tuesdata$public_response
# Option 2: Read directly from GitHub
# pixar_films <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')
# public_response <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')
View(public_response)
View(tuesdata)
View(pixar_films)
setdiff(pixar_films$film, public_response$film)
rm(list = ls())
# Using R
# Option 1: tidytuesdayR R package
#install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2025-03-11')
## OR
tuesdata <- tidytuesdayR::tt_load(2025, week = 10)
pixar_films <- tuesdata$pixar_films
public_response <- tuesdata$public_response
# Option 2: Read directly from GitHub
# pixar_films <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')
# public_response <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')
setdiff(pixar_films$film, public_response$film)
View(public_response)
View(public_response)
View(pixar_films)
pixar_films <- left_join(pixar_films, public_response, by = film)
pixar_films <- left_join(pixar_films, public_response, by = "film")
View(pixar_films)
# Using R
# Option 1: tidytuesdayR R package
#install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2025-03-11')
## OR
tuesdata <- tidytuesdayR::tt_load(2025, week = 10)
pixar_films <- tuesdata$pixar_films
public_response <- tuesdata$public_response
# Option 2: Read directly from GitHub
# pixar_films <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')
# public_response <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')
setdiff(y = pixar_films$film, public_response$film)
View(pixar_films)
View(pixar_films)
View(pixar_films)
pixar_df <- join(pixar_films, public_response, by = "film")
pixar_df <- merge(pixar_films, public_response, by = "film")
merge?
?merge
pixar_df <- merge(pixar_films, public_response, by = "film", all = TRUE)
View(pixar_df)
View(public_response)
View(pixar_films)
View(pixar_films)
View(public_response)
